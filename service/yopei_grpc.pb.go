// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: model/yopei.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// YopeiPaymentClient is the client API for YopeiPayment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type YopeiPaymentClient interface {
	CheckBalance(ctx context.Context, in *CheckBalanceMessage, opts ...grpc.CallOption) (*ResultMessage, error)
	DoPayment(ctx context.Context, in *PaymentMessage, opts ...grpc.CallOption) (*ResultMessage, error)
}

type yopeiPaymentClient struct {
	cc grpc.ClientConnInterface
}

func NewYopeiPaymentClient(cc grpc.ClientConnInterface) YopeiPaymentClient {
	return &yopeiPaymentClient{cc}
}

func (c *yopeiPaymentClient) CheckBalance(ctx context.Context, in *CheckBalanceMessage, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, "/YopeiPayment/CheckBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *yopeiPaymentClient) DoPayment(ctx context.Context, in *PaymentMessage, opts ...grpc.CallOption) (*ResultMessage, error) {
	out := new(ResultMessage)
	err := c.cc.Invoke(ctx, "/YopeiPayment/DoPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// YopeiPaymentServer is the server API for YopeiPayment service.
// All implementations must embed UnimplementedYopeiPaymentServer
// for forward compatibility
type YopeiPaymentServer interface {
	CheckBalance(context.Context, *CheckBalanceMessage) (*ResultMessage, error)
	DoPayment(context.Context, *PaymentMessage) (*ResultMessage, error)
	mustEmbedUnimplementedYopeiPaymentServer()
}

// UnimplementedYopeiPaymentServer must be embedded to have forward compatible implementations.
type UnimplementedYopeiPaymentServer struct {
}

func (UnimplementedYopeiPaymentServer) CheckBalance(context.Context, *CheckBalanceMessage) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBalance not implemented")
}
func (UnimplementedYopeiPaymentServer) DoPayment(context.Context, *PaymentMessage) (*ResultMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoPayment not implemented")
}
func (UnimplementedYopeiPaymentServer) mustEmbedUnimplementedYopeiPaymentServer() {}

// UnsafeYopeiPaymentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to YopeiPaymentServer will
// result in compilation errors.
type UnsafeYopeiPaymentServer interface {
	mustEmbedUnimplementedYopeiPaymentServer()
}

func RegisterYopeiPaymentServer(s grpc.ServiceRegistrar, srv YopeiPaymentServer) {
	s.RegisterService(&YopeiPayment_ServiceDesc, srv)
}

func _YopeiPayment_CheckBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckBalanceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YopeiPaymentServer).CheckBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YopeiPayment/CheckBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YopeiPaymentServer).CheckBalance(ctx, req.(*CheckBalanceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _YopeiPayment_DoPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(YopeiPaymentServer).DoPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/YopeiPayment/DoPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(YopeiPaymentServer).DoPayment(ctx, req.(*PaymentMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// YopeiPayment_ServiceDesc is the grpc.ServiceDesc for YopeiPayment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var YopeiPayment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "YopeiPayment",
	HandlerType: (*YopeiPaymentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckBalance",
			Handler:    _YopeiPayment_CheckBalance_Handler,
		},
		{
			MethodName: "DoPayment",
			Handler:    _YopeiPayment_DoPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/yopei.proto",
}
